// Mocks generated by Mockito 5.4.4 from annotations
// in nova_chrono/test/mocks/annotations.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:nova_chrono/application/api/task_create_service.dart' as _i5;
import 'package:nova_chrono/domain/model/task.dart' as _i4;
import 'package:nova_chrono/domain/repository/task_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String nextIdentity() => (super.noSuchMethod(
        Invocation.method(
          #nextIdentity,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #nextIdentity,
            [],
          ),
        ),
      ) as String);

  @override
  void add(_i4.Task? task) => super.noSuchMethod(
        Invocation.method(
          #add,
          [task],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TaskCreateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCreateService extends _i1.Mock implements _i5.TaskCreateService {
  MockTaskCreateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void createTask(
    String? taskName,
    DateTime? startTimestamp,
    DateTime? endTimestamp,
    String? details,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createTask,
          [
            taskName,
            startTimestamp,
            endTimestamp,
            details,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
