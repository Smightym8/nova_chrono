// Mocks generated by Mockito 5.4.4 from annotations
// in nova_chrono/test/mocks/annotations.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:nova_chrono/application/api/common_task_name_delete_service.dart'
    as _i13;
import 'package:nova_chrono/application/api/common_task_name_list_service.dart'
    as _i12;
import 'package:nova_chrono/application/api/task_create_service.dart' as _i7;
import 'package:nova_chrono/application/api/task_delete_service.dart' as _i10;
import 'package:nova_chrono/application/api/task_edit_service.dart' as _i9;
import 'package:nova_chrono/application/api/task_list_service.dart' as _i8;
import 'package:nova_chrono/domain/model/common_task_name.dart' as _i2;
import 'package:nova_chrono/domain/model/task.dart' as _i6;
import 'package:nova_chrono/domain/repository/common_task_name_repository.dart'
    as _i11;
import 'package:nova_chrono/domain/repository/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCommonTaskName_0 extends _i1.SmartFake
    implements _i2.CommonTaskName {
  _FakeCommonTaskName_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String nextIdentity() => (super.noSuchMethod(
        Invocation.method(
          #nextIdentity,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #nextIdentity,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<int> add(_i6.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [task],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i6.Task?> getById(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [taskId],
        ),
        returnValue: _i5.Future<_i6.Task?>.value(),
      ) as _i5.Future<_i6.Task?>);

  @override
  _i5.Future<List<_i6.Task>> getByDate(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #getByDate,
          [date],
        ),
        returnValue: _i5.Future<List<_i6.Task>>.value(<_i6.Task>[]),
      ) as _i5.Future<List<_i6.Task>>);

  @override
  _i5.Future<void> updateTask(_i6.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskCreateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCreateService extends _i1.Mock implements _i7.TaskCreateService {
  MockTaskCreateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> createTask(
    String? taskName,
    DateTime? startTimestamp,
    DateTime? endTimestamp,
    String? details,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [
            taskName,
            startTimestamp,
            endTimestamp,
            details,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #createTask,
            [
              taskName,
              startTimestamp,
              endTimestamp,
              details,
            ],
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [TaskListService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListService extends _i1.Mock implements _i8.TaskListService {
  MockTaskListService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Task>> getTasksByDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByDate,
          [date],
        ),
        returnValue: _i5.Future<List<_i6.Task>>.value(<_i6.Task>[]),
      ) as _i5.Future<List<_i6.Task>>);
}

/// A class which mocks [TaskEditService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskEditService extends _i1.Mock implements _i9.TaskEditService {
  MockTaskEditService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> editTask(
    String? taskId,
    String? taskName,
    DateTime? startTimestamp,
    DateTime? endTimestamp,
    String? details,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTask,
          [
            taskId,
            taskName,
            startTimestamp,
            endTimestamp,
            details,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskDeleteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDeleteService extends _i1.Mock implements _i10.TaskDeleteService {
  MockTaskDeleteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [CommonTaskNameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommonTaskNameRepository extends _i1.Mock
    implements _i11.CommonTaskNameRepository {
  MockCommonTaskNameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String nextIdentity() => (super.noSuchMethod(
        Invocation.method(
          #nextIdentity,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #nextIdentity,
            [],
          ),
        ),
      ) as String);

  @override
  void add(_i2.CommonTaskName? commonTaskName) => super.noSuchMethod(
        Invocation.method(
          #add,
          [commonTaskName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> updateCommonTaskName(_i2.CommonTaskName? commonTaskName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCommonTaskName,
          [commonTaskName],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteCommonTaskName(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCommonTaskName,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.CommonTaskName> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.CommonTaskName>.value(_FakeCommonTaskName_0(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.CommonTaskName>);

  @override
  _i5.Future<List<_i2.CommonTaskName>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.CommonTaskName>>.value(<_i2.CommonTaskName>[]),
      ) as _i5.Future<List<_i2.CommonTaskName>>);
}

/// A class which mocks [CommonTaskNameListService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommonTaskNameListService extends _i1.Mock
    implements _i12.CommonTaskNameListService {
  MockCommonTaskNameListService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.CommonTaskName>> getAllCommonTaskNames() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCommonTaskNames,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.CommonTaskName>>.value(<_i2.CommonTaskName>[]),
      ) as _i5.Future<List<_i2.CommonTaskName>>);
}

/// A class which mocks [CommonTaskNameDeleteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommonTaskNameDeleteService extends _i1.Mock
    implements _i13.CommonTaskNameDeleteService {
  MockCommonTaskNameDeleteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> deleteCommonTaskName(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCommonTaskName,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
